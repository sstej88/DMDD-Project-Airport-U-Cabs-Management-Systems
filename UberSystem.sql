CREATE TABLE UBER_SERVICES 
(
    BOOKING_ID NUMBER(12) GENERATED ALWAYS as IDENTITY(START WITH 555555555555 INCREMENT BY 12),
    PASSENGER_ID NUMBER(12) NOT NULL,
    PASSENGER_NAME VARCHAR2(60) NOT NULL,
    DESTINATION_ADDRESS VARCHAR2(60) NOT NULL,
    CAB_ID NUMBER(4) DEFAULT NULL,
    CAB_NUMBER VARCHAR2(8) DEFAULT NULL,
    DRIVER_ID NUMBER(4) DEFAULT NULL,
    DRIVER_NAME VARCHAR2(60) DEFAULT NULL,
    CAB_SERVICE_NAME VARCHAR2(12) DEFAULT NULL,
    DRIVER_RATING FLOAT DEFAULT NULL,
    CONSTRAINT PK_UBER_SERVICES PRIMARY KEY (BOOKING_ID)
);

ALTER TABLE UBER_SERVICES ADD FOREIGN KEY (PASSENGER_ID) REFERENCES PASSENGERS_DATA(PASSENGER_ID);

CREATE OR REPLACE FUNCTION GET_PASSENGER_NAME_DATA (INPUT_PASSENGER_ID NUMBER) RETURN VARCHAR2
AS
    OUTPUT_PASSENGER_NAME VARCHAR2(60);
BEGIN
    SELECT PASSENGER_NAME INTO OUTPUT_PASSENGER_NAME
    FROM PASSENGERS_DATA
    WHERE PASSENGER_ID = INPUT_PASSENGER_ID;
    RETURN OUTPUT_PASSENGER_NAME;
END;

CREATE OR REPLACE FUNCTION GET_PASSENGER_DESTINATION_ADDRESS_DATA (INPUT_PASSENGER_ID NUMBER) RETURN VARCHAR2
AS
    OUTPUT_PASSENGER_DESTINATION_ADDRESS VARCHAR2(60);
BEGIN
    SELECT DESTINATION_ADDRESS INTO OUTPUT_PASSENGER_DESTINATION_ADDRESS
    FROM PASSENGERS_DATA
    WHERE PASSENGER_ID = INPUT_PASSENGER_ID;
    RETURN OUTPUT_PASSENGER_DESTINATION_ADDRESS;
END;

CREATE OR REPLACE FUNCTION GET_CAB_NUMBER (INPUT_CAB_ID NUMBER) RETURN VARCHAR2
AS
    OUTPUT_CAB_NUMBER VARCHAR2(8);
BEGIN
    SELECT CAB_NUMBER INTO OUTPUT_CAB_NUMBER
    FROM CAB_DETAILS
    WHERE CAB_ID = INPUT_CAB_ID;
    RETURN OUTPUT_CAB_NUMBER;
END;

CREATE OR REPLACE FUNCTION GET_DRIVER_ID (INPUT_CAB_ID NUMBER) RETURN NUMBER
AS
    OUTPUT_DRIVER_ID NUMBER;
BEGIN
    SELECT DRIVER_ID INTO OUTPUT_DRIVER_ID
    FROM CAB_DETAILS
    WHERE CAB_ID = INPUT_CAB_ID;
    RETURN OUTPUT_DRIVER_ID;
END;

CREATE OR REPLACE FUNCTION GET_DRIVER_NAME (INPUT_CAB_ID NUMBER) RETURN VARCHAR2
AS
    OUTPUT_DRIVER_NAME VARCHAR2(60);
BEGIN
    SELECT DRIVER_NAME INTO OUTPUT_DRIVER_NAME
    FROM CAB_DETAILS
    WHERE CAB_ID = INPUT_CAB_ID;
    RETURN OUTPUT_DRIVER_NAME;
END;

CREATE OR REPLACE FUNCTION GET_CAB_SERVICE_NAME (INPUT_CAB_ID NUMBER) RETURN VARCHAR2
AS
    OUTPUT_CAB_SERVICE_NAME VARCHAR2(12);
BEGIN
    SELECT CAB_SERVICE_NAME INTO OUTPUT_CAB_SERVICE_NAME
    FROM CAB_DETAILS
    WHERE CAB_ID = INPUT_CAB_ID;
    RETURN OUTPUT_CAB_SERVICE_NAME;
END;

CREATE OR REPLACE FUNCTION GET_DRIVER_RATING (INPUT_CAB_ID NUMBER) RETURN FLOAT
AS
    OUTPUT_DRIVER_RATING FLOAT;
BEGIN
    SELECT DRIVER_RATING INTO OUTPUT_DRIVER_RATING
    FROM CAB_DETAILS
    WHERE CAB_ID = INPUT_CAB_ID;
    RETURN OUTPUT_DRIVER_RATING;
END;

CREATE OR REPLACE PROCEDURE ADD_TO_UBER_SERVICES 
(
    INPUT_PASSENGER_ID IN NUMBER,
    INPUT_CAB_ID IN NUMBER,
    OUTPUT_PASSENGER_NAME OUT VARCHAR2,
    OUTPUT_PASSENGER_DESTINATION_ADDRESS OUT VARCHAR2,
    OUTPUT_CAB_NUMBER OUT VARCHAR2,
    OUTPUT_DRIVER_ID OUT NUMBER,
    OUTPUT_DRIVER_NAME OUT VARCHAR2,
    OUTPUT_CAB_SERVICE_NAME OUT VARCHAR2,
    OUTPUT_DRIVER_RATING OUT FLOAT
)
AS
BEGIN
    OUTPUT_PASSENGER_NAME := GET_PASSENGER_NAME_DATA(INPUT_PASSENGER_ID);
    OUTPUT_PASSENGER_DESTINATION_ADDRESS := GET_PASSENGER_DESTINATION_ADDRESS_DATA(INPUT_PASSENGER_ID);
    OUTPUT_CAB_NUMBER := GET_CAB_NUMBER(INPUT_CAB_ID);
    OUTPUT_DRIVER_ID := GET_DRIVER_ID(INPUT_CAB_ID);
    OUTPUT_DRIVER_NAME := GET_DRIVER_NAME(INPUT_CAB_ID);
    OUTPUT_CAB_SERVICE_NAME := GET_CAB_SERVICE_NAME(INPUT_CAB_ID);
    OUTPUT_DRIVER_RATING := GET_DRIVER_RATING(INPUT_CAB_ID);
    INSERT INTO UBER_SERVICES (PASSENGER_ID, PASSENGER_NAME, DESTINATION_ADDRESS, CAB_ID, CAB_NUMBER, DRIVER_ID, DRIVER_NAME, CAB_SERVICE_NAME, DRIVER_RATING) 
    VALUES (INPUT_PASSENGER_ID, OUTPUT_PASSENGER_NAME, OUTPUT_PASSENGER_DESTINATION_ADDRESS, INPUT_CAB_ID, OUTPUT_CAB_NUMBER, OUTPUT_DRIVER_ID, OUTPUT_DRIVER_NAME, OUTPUT_CAB_SERVICE_NAME, OUTPUT_DRIVER_RATING);
    UPDATE CAB_DETAILS SET OPEN_TO_HIRE=0 WHERE CAB_ID=INPUT_CAB_ID;
    DBMS_OUTPUT.PUT_LINE('PASSENGER AND CAB DETAILS WERE ASSOCIATED AND INSERTED INTO UBER SERVICES MACHINE');
END;

CREATE OR REPLACE FUNCTION IS_CAB_READY_TO_HIRE RETURN NUMBER
AS
    IS_CAB_WAITING NUMBER;
BEGIN
    SELECT COUNT(CAB_ID) INTO IS_CAB_WAITING FROM CAB_DETAILS WHERE OPEN_TO_HIRE=1;
    RETURN IS_CAB_WAITING;
END;

CREATE OR REPLACE TRIGGER UBER_SERVICES_FUNCTIONALITY
    AFTER INSERT OR UPDATE ON PASSENGERS_DATA
DECLARE
    PASSENGER_ID_OUTPUT NUMBER;
    CAB_ID_OUTPUT NUMBER;
    OUTPUT_IS_CAB_READY_TO_HIRE NUMBER;
    OUTPUT_PASSENGER_NAME VARCHAR2(60);
    OUTPUT_PASSENGER_DESTINATION_ADDRESS VARCHAR2(60);
    OUTPUT_CAB_NUMBER VARCHAR2(8);
    OUTPUT_DRIVER_ID NUMBER;
    OUTPUT_DRIVER_NAME VARCHAR2(60);
    OUTPUT_CAB_SERVICE_NAME VARCHAR2(12);
    OUTPUT_DRIVER_RATING FLOAT;
BEGIN
    SELECT MAX(PASSENGER_ID) INTO PASSENGER_ID_OUTPUT FROM PASSENGERS_DATA;
    SELECT MIN(CAB_ID) INTO CAB_ID_OUTPUT FROM CAB_DETAILS WHERE OPEN_TO_HIRE=1;
    ADD_TO_UBER_SERVICES(PASSENGER_ID_OUTPUT, CAB_ID_OUTPUT, OUTPUT_PASSENGER_NAME, OUTPUT_PASSENGER_DESTINATION_ADDRESS, OUTPUT_CAB_NUMBER, OUTPUT_DRIVER_ID, OUTPUT_DRIVER_NAME, OUTPUT_CAB_SERVICE_NAME, OUTPUT_DRIVER_RATING);
END;

DROP TABLE UBER_SERVICES;

/*
    Manually adding into Uber Services. However usually these will be added by trigger UBER_SERICVICES_FUNCTIONALITY
*/
/*
    DECLARE
        OUTPUT_PASSENGER_NAME VARCHAR2(60);
        OUTPUT_PASSENGER_DESTINATION_ADDRESS VARCHAR2(60);
        OUTPUT_CAB_NUMBER VARCHAR2(8);
        OUTPUT_DRIVER_ID NUMBER;
        OUTPUT_DRIVER_NAME VARCHAR2(60);
        OUTPUT_CAB_SERVICE_NAME VARCHAR2(12);
        OUTPUT_DRIVER_RATING FLOAT;
    BEGIN
        ADD_TO_UBER_SERVICES(100000000000, 1111, OUTPUT_PASSENGER_NAME, OUTPUT_PASSENGER_DESTINATION_ADDRESS, OUTPUT_CAB_NUMBER, OUTPUT_DRIVER_ID, OUTPUT_DRIVER_NAME, OUTPUT_CAB_SERVICE_NAME, OUTPUT_DRIVER_RATING);
    END;
*/